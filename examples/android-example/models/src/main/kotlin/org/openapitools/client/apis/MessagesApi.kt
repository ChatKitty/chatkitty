/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.ApiError
import org.openapitools.client.models.ApplicationResource
import org.openapitools.client.models.AuthenticationError
import org.openapitools.client.models.CursorPagedModelMessageResource
import org.openapitools.client.models.MessagePropertiesPatch
import org.openapitools.client.models.MessageResource
import org.openapitools.client.models.PagedModelMessageReadReceiptResource
import org.openapitools.client.models.ReplyThreadResource

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class MessagesApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.chatkitty.com")
        }
    }

    /**
     * Delete a message
     * Deletes a message by ID
     * @param id Message ID
     * @return ReplyThreadResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteMessage(id: kotlin.Long) : ReplyThreadResource {
        val localVarResponse = deleteMessageWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ReplyThreadResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete a message
     * Deletes a message by ID
     * @param id Message ID
     * @return ApiResponse<ReplyThreadResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteMessageWithHttpInfo(id: kotlin.Long) : ApiResponse<ReplyThreadResource?> {
        val localVariableConfig = deleteMessageRequestConfig(id = id)

        return request<Unit, ReplyThreadResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteMessage
     *
     * @param id Message ID
     * @return RequestConfig
     */
    fun deleteMessageRequestConfig(id: kotlin.Long) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/v1/messages/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete messages
     * Deletes all messages belonging to this application
     * @return ApplicationResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteMessages() : ApplicationResource {
        val localVarResponse = deleteMessagesWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ApplicationResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete messages
     * Deletes all messages belonging to this application
     * @return ApiResponse<ApplicationResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteMessagesWithHttpInfo() : ApiResponse<ApplicationResource?> {
        val localVariableConfig = deleteMessagesRequestConfig()

        return request<Unit, ApplicationResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteMessages
     *
     * @return RequestConfig
     */
    fun deleteMessagesRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/v1/messages",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * List message read receipts
     * Returns a page of read receipts for this message
     * @param id 
     * @param page Zero-based page index (0..N) (optional, default to 0)
     * @param size The size of the page to be returned (optional, default to 25)
     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return PagedModelMessageReadReceiptResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listMessageReadReceipts(id: kotlin.Long, page: kotlin.Int? = 0, size: kotlin.Int? = 25, sort: kotlin.collections.List<kotlin.String>? = null) : PagedModelMessageReadReceiptResource {
        val localVarResponse = listMessageReadReceiptsWithHttpInfo(id = id, page = page, size = size, sort = sort)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PagedModelMessageReadReceiptResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List message read receipts
     * Returns a page of read receipts for this message
     * @param id 
     * @param page Zero-based page index (0..N) (optional, default to 0)
     * @param size The size of the page to be returned (optional, default to 25)
     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return ApiResponse<PagedModelMessageReadReceiptResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listMessageReadReceiptsWithHttpInfo(id: kotlin.Long, page: kotlin.Int?, size: kotlin.Int?, sort: kotlin.collections.List<kotlin.String>?) : ApiResponse<PagedModelMessageReadReceiptResource?> {
        val localVariableConfig = listMessageReadReceiptsRequestConfig(id = id, page = page, size = size, sort = sort)

        return request<Unit, PagedModelMessageReadReceiptResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listMessageReadReceipts
     *
     * @param id 
     * @param page Zero-based page index (0..N) (optional, default to 0)
     * @param size The size of the page to be returned (optional, default to 25)
     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return RequestConfig
     */
    fun listMessageReadReceiptsRequestConfig(id: kotlin.Long, page: kotlin.Int?, size: kotlin.Int?, sort: kotlin.collections.List<kotlin.String>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (size != null) {
                    put("size", listOf(size.toString()))
                }
                if (sort != null) {
                    put("sort", toMultiValue(sort.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/messages/{id}/read-receipts".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter relation
     */
     enum class RelationListMessages(val value: kotlin.String) {
         @Json(name = "SELF") sELF("SELF"),
         @Json(name = "PREVIOUS") pREVIOUS("PREVIOUS"),
         @Json(name = "NEXT") nEXT("NEXT")
     }

    /**
     * List messages
     * Returns a page of messages belonging to this application
     * @param size The size of the page to be returned (optional)
     * @param start Start cursor value. Do not set manually. Provided by the Platform API pagination engine to fetch previous or next pages (optional)
     * @param next Next page cursor value. Do not set manually. Provided by the Platform API pagination engine to fetch subsequent pages (optional)
     * @param relation Page cursor relation. Do not set manually. Provided by the Platform API pagination engine to fetch previous or next pages (optional)
     * @param username Filters messages by a sender&#39;s username (optional)
     * @param query Filters text messages by text contained in the message body (optional)
     * @return CursorPagedModelMessageResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listMessages(size: kotlin.Int? = null, start: kotlin.Long? = null, next: kotlin.Long? = null, relation: RelationListMessages? = null, username: kotlin.String? = null, query: kotlin.String? = null) : CursorPagedModelMessageResource {
        val localVarResponse = listMessagesWithHttpInfo(size = size, start = start, next = next, relation = relation, username = username, query = query)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CursorPagedModelMessageResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List messages
     * Returns a page of messages belonging to this application
     * @param size The size of the page to be returned (optional)
     * @param start Start cursor value. Do not set manually. Provided by the Platform API pagination engine to fetch previous or next pages (optional)
     * @param next Next page cursor value. Do not set manually. Provided by the Platform API pagination engine to fetch subsequent pages (optional)
     * @param relation Page cursor relation. Do not set manually. Provided by the Platform API pagination engine to fetch previous or next pages (optional)
     * @param username Filters messages by a sender&#39;s username (optional)
     * @param query Filters text messages by text contained in the message body (optional)
     * @return ApiResponse<CursorPagedModelMessageResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listMessagesWithHttpInfo(size: kotlin.Int?, start: kotlin.Long?, next: kotlin.Long?, relation: RelationListMessages?, username: kotlin.String?, query: kotlin.String?) : ApiResponse<CursorPagedModelMessageResource?> {
        val localVariableConfig = listMessagesRequestConfig(size = size, start = start, next = next, relation = relation, username = username, query = query)

        return request<Unit, CursorPagedModelMessageResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listMessages
     *
     * @param size The size of the page to be returned (optional)
     * @param start Start cursor value. Do not set manually. Provided by the Platform API pagination engine to fetch previous or next pages (optional)
     * @param next Next page cursor value. Do not set manually. Provided by the Platform API pagination engine to fetch subsequent pages (optional)
     * @param relation Page cursor relation. Do not set manually. Provided by the Platform API pagination engine to fetch previous or next pages (optional)
     * @param username Filters messages by a sender&#39;s username (optional)
     * @param query Filters text messages by text contained in the message body (optional)
     * @return RequestConfig
     */
    fun listMessagesRequestConfig(size: kotlin.Int?, start: kotlin.Long?, next: kotlin.Long?, relation: RelationListMessages?, username: kotlin.String?, query: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (size != null) {
                    put("size", listOf(size.toString()))
                }
                if (start != null) {
                    put("start", listOf(start.toString()))
                }
                if (next != null) {
                    put("next", listOf(next.toString()))
                }
                if (relation != null) {
                    put("relation", listOf(relation.value))
                }
                if (username != null) {
                    put("username", listOf(username.toString()))
                }
                if (query != null) {
                    put("query", listOf(query.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/messages",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve a message
     * Returns a message by ID
     * @param id Message ID
     * @return MessageResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun retrieveMessage(id: kotlin.Long) : MessageResource {
        val localVarResponse = retrieveMessageWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MessageResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve a message
     * Returns a message by ID
     * @param id Message ID
     * @return ApiResponse<MessageResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun retrieveMessageWithHttpInfo(id: kotlin.Long) : ApiResponse<MessageResource?> {
        val localVariableConfig = retrieveMessageRequestConfig(id = id)

        return request<Unit, MessageResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation retrieveMessage
     *
     * @param id Message ID
     * @return RequestConfig
     */
    fun retrieveMessageRequestConfig(id: kotlin.Long) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/messages/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update a message
     * Updates a message properties
     * @param id Message ID
     * @param messagePropertiesPatch  (optional)
     * @return MessageResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateMessage(id: kotlin.Long, messagePropertiesPatch: MessagePropertiesPatch? = null) : MessageResource {
        val localVarResponse = updateMessageWithHttpInfo(id = id, messagePropertiesPatch = messagePropertiesPatch)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MessageResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update a message
     * Updates a message properties
     * @param id Message ID
     * @param messagePropertiesPatch  (optional)
     * @return ApiResponse<MessageResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateMessageWithHttpInfo(id: kotlin.Long, messagePropertiesPatch: MessagePropertiesPatch?) : ApiResponse<MessageResource?> {
        val localVariableConfig = updateMessageRequestConfig(id = id, messagePropertiesPatch = messagePropertiesPatch)

        return request<MessagePropertiesPatch, MessageResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateMessage
     *
     * @param id Message ID
     * @param messagePropertiesPatch  (optional)
     * @return RequestConfig
     */
    fun updateMessageRequestConfig(id: kotlin.Long, messagePropertiesPatch: MessagePropertiesPatch?) : RequestConfig<MessagePropertiesPatch> {
        val localVariableBody = messagePropertiesPatch
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/v1/messages/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
