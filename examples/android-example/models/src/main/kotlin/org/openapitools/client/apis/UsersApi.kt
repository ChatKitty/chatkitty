/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.ApiError
import org.openapitools.client.models.ApplicationResource
import org.openapitools.client.models.AuthenticationError
import org.openapitools.client.models.ChatUserPropertiesPatch
import org.openapitools.client.models.ChatUserResource
import org.openapitools.client.models.CreateExternalFileProperties
import org.openapitools.client.models.CreatePersonChatUserResource
import org.openapitools.client.models.CursorPagedModelMessageResource
import org.openapitools.client.models.CursorPagedModelNotificationResource
import org.openapitools.client.models.PagedModelChannelResource
import org.openapitools.client.models.PagedModelChatUserResource
import org.openapitools.client.models.SecretResource
import org.openapitools.client.models.UpdateUserDisplayPictureRequest

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class UsersApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.chatkitty.com")
        }
    }

    /**
     * Check a user exists
     * Checks if a user exists
     * @param name Username of the user
     * @return kotlin.Any
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun checkUserExists(name: kotlin.String) : kotlin.Any {
        val localVarResponse = checkUserExistsWithHttpInfo(name = name)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Check a user exists
     * Checks if a user exists
     * @param name Username of the user
     * @return ApiResponse<kotlin.Any?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun checkUserExistsWithHttpInfo(name: kotlin.String) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = checkUserExistsRequestConfig(name = name)

        return request<Unit, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation checkUserExists
     *
     * @param name Username of the user
     * @return RequestConfig
     */
    fun checkUserExistsRequestConfig(name: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("name", listOf(name.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.HEAD,
            path = "/v1/users",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Create a user
     * Creates a new user
     * @param createPersonChatUserResource 
     * @return ChatUserResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createUser(createPersonChatUserResource: CreatePersonChatUserResource) : ChatUserResource {
        val localVarResponse = createUserWithHttpInfo(createPersonChatUserResource = createPersonChatUserResource)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ChatUserResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a user
     * Creates a new user
     * @param createPersonChatUserResource 
     * @return ApiResponse<ChatUserResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createUserWithHttpInfo(createPersonChatUserResource: CreatePersonChatUserResource) : ApiResponse<ChatUserResource?> {
        val localVariableConfig = createUserRequestConfig(createPersonChatUserResource = createPersonChatUserResource)

        return request<CreatePersonChatUserResource, ChatUserResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createUser
     *
     * @param createPersonChatUserResource 
     * @return RequestConfig
     */
    fun createUserRequestConfig(createPersonChatUserResource: CreatePersonChatUserResource) : RequestConfig<CreatePersonChatUserResource> {
        val localVariableBody = createPersonChatUserResource
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/v1/users",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete a user
     * Delets a user
     * @param id User ID
     * @return ApplicationResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteUser(id: kotlin.Long) : ApplicationResource {
        val localVarResponse = deleteUserWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ApplicationResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete a user
     * Delets a user
     * @param id User ID
     * @return ApiResponse<ApplicationResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteUserWithHttpInfo(id: kotlin.Long) : ApiResponse<ApplicationResource?> {
        val localVariableConfig = deleteUserRequestConfig(id = id)

        return request<Unit, ApplicationResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteUser
     *
     * @param id User ID
     * @return RequestConfig
     */
    fun deleteUserRequestConfig(id: kotlin.Long) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/v1/users/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * List a user&#39;s channels
     * Returns a page of channels for this user created or joined
     * @param id User ID
     * @param page Zero-based page index (0..N) (optional, default to 0)
     * @param size The size of the page to be returned (optional, default to 25)
     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return PagedModelChannelResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listUserChannels(id: kotlin.Long, page: kotlin.Int? = 0, size: kotlin.Int? = 25, sort: kotlin.collections.List<kotlin.String>? = null) : PagedModelChannelResource {
        val localVarResponse = listUserChannelsWithHttpInfo(id = id, page = page, size = size, sort = sort)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PagedModelChannelResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List a user&#39;s channels
     * Returns a page of channels for this user created or joined
     * @param id User ID
     * @param page Zero-based page index (0..N) (optional, default to 0)
     * @param size The size of the page to be returned (optional, default to 25)
     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return ApiResponse<PagedModelChannelResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listUserChannelsWithHttpInfo(id: kotlin.Long, page: kotlin.Int?, size: kotlin.Int?, sort: kotlin.collections.List<kotlin.String>?) : ApiResponse<PagedModelChannelResource?> {
        val localVariableConfig = listUserChannelsRequestConfig(id = id, page = page, size = size, sort = sort)

        return request<Unit, PagedModelChannelResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listUserChannels
     *
     * @param id User ID
     * @param page Zero-based page index (0..N) (optional, default to 0)
     * @param size The size of the page to be returned (optional, default to 25)
     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return RequestConfig
     */
    fun listUserChannelsRequestConfig(id: kotlin.Long, page: kotlin.Int?, size: kotlin.Int?, sort: kotlin.collections.List<kotlin.String>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (size != null) {
                    put("size", listOf(size.toString()))
                }
                if (sort != null) {
                    put("sort", toMultiValue(sort.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/users/{id}/channels".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter relation
     */
     enum class RelationListUserMessages(val value: kotlin.String) {
         @Json(name = "SELF") sELF("SELF"),
         @Json(name = "PREVIOUS") pREVIOUS("PREVIOUS"),
         @Json(name = "NEXT") nEXT("NEXT")
     }

    /**
     * List a user&#39;s messages
     * Returns a page of messages sent by this user
     * @param id User ID
     * @param size The size of the page to be returned (optional)
     * @param start Start cursor value. Do not set manually. Provided by the Platform API pagination engine to fetch previous or next pages (optional)
     * @param next Next page cursor value. Do not set manually. Provided by the Platform API pagination engine to fetch subsequent pages (optional)
     * @param relation Page cursor relation. Do not set manually. Provided by the Platform API pagination engine to fetch previous or next pages (optional)
     * @param unread Filters by returning unread messages (optional)
     * @return CursorPagedModelMessageResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listUserMessages(id: kotlin.Long, size: kotlin.Int? = null, start: kotlin.Long? = null, next: kotlin.Long? = null, relation: RelationListUserMessages? = null, unread: kotlin.Boolean? = null) : CursorPagedModelMessageResource {
        val localVarResponse = listUserMessagesWithHttpInfo(id = id, size = size, start = start, next = next, relation = relation, unread = unread)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CursorPagedModelMessageResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List a user&#39;s messages
     * Returns a page of messages sent by this user
     * @param id User ID
     * @param size The size of the page to be returned (optional)
     * @param start Start cursor value. Do not set manually. Provided by the Platform API pagination engine to fetch previous or next pages (optional)
     * @param next Next page cursor value. Do not set manually. Provided by the Platform API pagination engine to fetch subsequent pages (optional)
     * @param relation Page cursor relation. Do not set manually. Provided by the Platform API pagination engine to fetch previous or next pages (optional)
     * @param unread Filters by returning unread messages (optional)
     * @return ApiResponse<CursorPagedModelMessageResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listUserMessagesWithHttpInfo(id: kotlin.Long, size: kotlin.Int?, start: kotlin.Long?, next: kotlin.Long?, relation: RelationListUserMessages?, unread: kotlin.Boolean?) : ApiResponse<CursorPagedModelMessageResource?> {
        val localVariableConfig = listUserMessagesRequestConfig(id = id, size = size, start = start, next = next, relation = relation, unread = unread)

        return request<Unit, CursorPagedModelMessageResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listUserMessages
     *
     * @param id User ID
     * @param size The size of the page to be returned (optional)
     * @param start Start cursor value. Do not set manually. Provided by the Platform API pagination engine to fetch previous or next pages (optional)
     * @param next Next page cursor value. Do not set manually. Provided by the Platform API pagination engine to fetch subsequent pages (optional)
     * @param relation Page cursor relation. Do not set manually. Provided by the Platform API pagination engine to fetch previous or next pages (optional)
     * @param unread Filters by returning unread messages (optional)
     * @return RequestConfig
     */
    fun listUserMessagesRequestConfig(id: kotlin.Long, size: kotlin.Int?, start: kotlin.Long?, next: kotlin.Long?, relation: RelationListUserMessages?, unread: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (size != null) {
                    put("size", listOf(size.toString()))
                }
                if (start != null) {
                    put("start", listOf(start.toString()))
                }
                if (next != null) {
                    put("next", listOf(next.toString()))
                }
                if (relation != null) {
                    put("relation", listOf(relation.value))
                }
                if (unread != null) {
                    put("unread", listOf(unread.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/users/{id}/messages".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter relation
     */
     enum class RelationListUserNotifications(val value: kotlin.String) {
         @Json(name = "SELF") sELF("SELF"),
         @Json(name = "PREVIOUS") pREVIOUS("PREVIOUS"),
         @Json(name = "NEXT") nEXT("NEXT")
     }

    /**
     * List a user&#39;s notifications
     * Returns a page of notifications received by this user
     * @param id User ID
     * @param size The size of the page to be returned (optional)
     * @param start Start cursor value. Do not set manually. Provided by the Platform API pagination engine to fetch previous or next pages (optional)
     * @param next Next page cursor value. Do not set manually. Provided by the Platform API pagination engine to fetch subsequent pages (optional)
     * @param relation Page cursor relation. Do not set manually. Provided by the Platform API pagination engine to fetch previous or next pages (optional)
     * @return CursorPagedModelNotificationResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listUserNotifications(id: kotlin.Long, size: kotlin.Int? = null, start: kotlin.Long? = null, next: kotlin.Long? = null, relation: RelationListUserNotifications? = null) : CursorPagedModelNotificationResource {
        val localVarResponse = listUserNotificationsWithHttpInfo(id = id, size = size, start = start, next = next, relation = relation)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CursorPagedModelNotificationResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List a user&#39;s notifications
     * Returns a page of notifications received by this user
     * @param id User ID
     * @param size The size of the page to be returned (optional)
     * @param start Start cursor value. Do not set manually. Provided by the Platform API pagination engine to fetch previous or next pages (optional)
     * @param next Next page cursor value. Do not set manually. Provided by the Platform API pagination engine to fetch subsequent pages (optional)
     * @param relation Page cursor relation. Do not set manually. Provided by the Platform API pagination engine to fetch previous or next pages (optional)
     * @return ApiResponse<CursorPagedModelNotificationResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listUserNotificationsWithHttpInfo(id: kotlin.Long, size: kotlin.Int?, start: kotlin.Long?, next: kotlin.Long?, relation: RelationListUserNotifications?) : ApiResponse<CursorPagedModelNotificationResource?> {
        val localVariableConfig = listUserNotificationsRequestConfig(id = id, size = size, start = start, next = next, relation = relation)

        return request<Unit, CursorPagedModelNotificationResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listUserNotifications
     *
     * @param id User ID
     * @param size The size of the page to be returned (optional)
     * @param start Start cursor value. Do not set manually. Provided by the Platform API pagination engine to fetch previous or next pages (optional)
     * @param next Next page cursor value. Do not set manually. Provided by the Platform API pagination engine to fetch subsequent pages (optional)
     * @param relation Page cursor relation. Do not set manually. Provided by the Platform API pagination engine to fetch previous or next pages (optional)
     * @return RequestConfig
     */
    fun listUserNotificationsRequestConfig(id: kotlin.Long, size: kotlin.Int?, start: kotlin.Long?, next: kotlin.Long?, relation: RelationListUserNotifications?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (size != null) {
                    put("size", listOf(size.toString()))
                }
                if (start != null) {
                    put("start", listOf(start.toString()))
                }
                if (next != null) {
                    put("next", listOf(next.toString()))
                }
                if (relation != null) {
                    put("relation", listOf(relation.value))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/users/{id}/notifications".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * List users
     * Returns a page of users belonging to this application
     * @param page Zero-based page index (0..N) (optional, default to 0)
     * @param size The size of the page to be returned (optional, default to 25)
     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @param name Filters by username (optional)
     * @param properties Filters by user custom properties (optional)
     * @return PagedModelChatUserResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listUsers(page: kotlin.Int? = 0, size: kotlin.Int? = 25, sort: kotlin.collections.List<kotlin.String>? = null, name: kotlin.String? = null, properties: kotlin.String? = null) : PagedModelChatUserResource {
        val localVarResponse = listUsersWithHttpInfo(page = page, size = size, sort = sort, name = name, properties = properties)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PagedModelChatUserResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List users
     * Returns a page of users belonging to this application
     * @param page Zero-based page index (0..N) (optional, default to 0)
     * @param size The size of the page to be returned (optional, default to 25)
     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @param name Filters by username (optional)
     * @param properties Filters by user custom properties (optional)
     * @return ApiResponse<PagedModelChatUserResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listUsersWithHttpInfo(page: kotlin.Int?, size: kotlin.Int?, sort: kotlin.collections.List<kotlin.String>?, name: kotlin.String?, properties: kotlin.String?) : ApiResponse<PagedModelChatUserResource?> {
        val localVariableConfig = listUsersRequestConfig(page = page, size = size, sort = sort, name = name, properties = properties)

        return request<Unit, PagedModelChatUserResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listUsers
     *
     * @param page Zero-based page index (0..N) (optional, default to 0)
     * @param size The size of the page to be returned (optional, default to 25)
     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @param name Filters by username (optional)
     * @param properties Filters by user custom properties (optional)
     * @return RequestConfig
     */
    fun listUsersRequestConfig(page: kotlin.Int?, size: kotlin.Int?, sort: kotlin.collections.List<kotlin.String>?, name: kotlin.String?, properties: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (size != null) {
                    put("size", listOf(size.toString()))
                }
                if (sort != null) {
                    put("sort", toMultiValue(sort.toList(), "multi"))
                }
                if (name != null) {
                    put("name", listOf(name.toString()))
                }
                if (properties != null) {
                    put("properties", listOf(properties.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/users",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Remove a user secret
     * Removes a user secret&#39;s value
     * @param id User ID
     * @param name The secret&#39;s name
     * @return ChatUserResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun removeUserSecret(id: kotlin.Long, name: kotlin.String) : ChatUserResource {
        val localVarResponse = removeUserSecretWithHttpInfo(id = id, name = name)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ChatUserResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Remove a user secret
     * Removes a user secret&#39;s value
     * @param id User ID
     * @param name The secret&#39;s name
     * @return ApiResponse<ChatUserResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun removeUserSecretWithHttpInfo(id: kotlin.Long, name: kotlin.String) : ApiResponse<ChatUserResource?> {
        val localVariableConfig = removeUserSecretRequestConfig(id = id, name = name)

        return request<Unit, ChatUserResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation removeUserSecret
     *
     * @param id User ID
     * @param name The secret&#39;s name
     * @return RequestConfig
     */
    fun removeUserSecretRequestConfig(id: kotlin.Long, name: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/v1/users/{id}/secrets/{name}".replace("{"+"id"+"}", encodeURIComponent(id.toString())).replace("{"+"name"+"}", encodeURIComponent(name.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve a user
     * Returns a user by ID
     * @param id User ID
     * @return ChatUserResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun retrieveUser(id: kotlin.Long) : ChatUserResource {
        val localVarResponse = retrieveUserWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ChatUserResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve a user
     * Returns a user by ID
     * @param id User ID
     * @return ApiResponse<ChatUserResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun retrieveUserWithHttpInfo(id: kotlin.Long) : ApiResponse<ChatUserResource?> {
        val localVariableConfig = retrieveUserRequestConfig(id = id)

        return request<Unit, ChatUserResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation retrieveUser
     *
     * @param id User ID
     * @return RequestConfig
     */
    fun retrieveUserRequestConfig(id: kotlin.Long) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/users/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve a user secret
     * Returns a user secret
     * @param id User ID
     * @param name The secret&#39;s name
     * @return SecretResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun retrieveUserSecret(id: kotlin.Long, name: kotlin.String) : SecretResource {
        val localVarResponse = retrieveUserSecretWithHttpInfo(id = id, name = name)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SecretResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve a user secret
     * Returns a user secret
     * @param id User ID
     * @param name The secret&#39;s name
     * @return ApiResponse<SecretResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun retrieveUserSecretWithHttpInfo(id: kotlin.Long, name: kotlin.String) : ApiResponse<SecretResource?> {
        val localVariableConfig = retrieveUserSecretRequestConfig(id = id, name = name)

        return request<Unit, SecretResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation retrieveUserSecret
     *
     * @param id User ID
     * @param name The secret&#39;s name
     * @return RequestConfig
     */
    fun retrieveUserSecretRequestConfig(id: kotlin.Long, name: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/users/{id}/secrets/{name}".replace("{"+"id"+"}", encodeURIComponent(id.toString())).replace("{"+"name"+"}", encodeURIComponent(name.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Set a user secret
     * Sets a user secret&#39;s value
     * @param id User ID
     * @param name The secret&#39;s name
     * @param secretResource 
     * @return ChatUserResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun setUserSecret(id: kotlin.Long, name: kotlin.String, secretResource: SecretResource) : ChatUserResource {
        val localVarResponse = setUserSecretWithHttpInfo(id = id, name = name, secretResource = secretResource)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ChatUserResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Set a user secret
     * Sets a user secret&#39;s value
     * @param id User ID
     * @param name The secret&#39;s name
     * @param secretResource 
     * @return ApiResponse<ChatUserResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun setUserSecretWithHttpInfo(id: kotlin.Long, name: kotlin.String, secretResource: SecretResource) : ApiResponse<ChatUserResource?> {
        val localVariableConfig = setUserSecretRequestConfig(id = id, name = name, secretResource = secretResource)

        return request<SecretResource, ChatUserResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation setUserSecret
     *
     * @param id User ID
     * @param name The secret&#39;s name
     * @param secretResource 
     * @return RequestConfig
     */
    fun setUserSecretRequestConfig(id: kotlin.Long, name: kotlin.String, secretResource: SecretResource) : RequestConfig<SecretResource> {
        val localVariableBody = secretResource
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/v1/users/{id}/secrets/{name}".replace("{"+"id"+"}", encodeURIComponent(id.toString())).replace("{"+"name"+"}", encodeURIComponent(name.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update a user
     * Updates a user
     * @param id User ID
     * @param chatUserPropertiesPatch  (optional)
     * @return ChatUserResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateUser(id: kotlin.Long, chatUserPropertiesPatch: ChatUserPropertiesPatch? = null) : ChatUserResource {
        val localVarResponse = updateUserWithHttpInfo(id = id, chatUserPropertiesPatch = chatUserPropertiesPatch)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ChatUserResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update a user
     * Updates a user
     * @param id User ID
     * @param chatUserPropertiesPatch  (optional)
     * @return ApiResponse<ChatUserResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateUserWithHttpInfo(id: kotlin.Long, chatUserPropertiesPatch: ChatUserPropertiesPatch?) : ApiResponse<ChatUserResource?> {
        val localVariableConfig = updateUserRequestConfig(id = id, chatUserPropertiesPatch = chatUserPropertiesPatch)

        return request<ChatUserPropertiesPatch, ChatUserResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateUser
     *
     * @param id User ID
     * @param chatUserPropertiesPatch  (optional)
     * @return RequestConfig
     */
    fun updateUserRequestConfig(id: kotlin.Long, chatUserPropertiesPatch: ChatUserPropertiesPatch?) : RequestConfig<ChatUserPropertiesPatch> {
        val localVariableBody = chatUserPropertiesPatch
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/v1/users/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update a user&#39;s display picture
     * Updates a user&#39;s display picture
     * @param id User ID
     * @param createExternalFileProperties 
     * @return ChatUserResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateUserDisplayPicture(id: kotlin.Long, createExternalFileProperties: CreateExternalFileProperties) : ChatUserResource {
        val localVarResponse = updateUserDisplayPictureWithHttpInfo(id = id, createExternalFileProperties = createExternalFileProperties)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ChatUserResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update a user&#39;s display picture
     * Updates a user&#39;s display picture
     * @param id User ID
     * @param createExternalFileProperties 
     * @return ApiResponse<ChatUserResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateUserDisplayPictureWithHttpInfo(id: kotlin.Long, createExternalFileProperties: CreateExternalFileProperties) : ApiResponse<ChatUserResource?> {
        val localVariableConfig = updateUserDisplayPictureRequestConfig(id = id, createExternalFileProperties = createExternalFileProperties)

        return request<CreateExternalFileProperties, ChatUserResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateUserDisplayPicture
     *
     * @param id User ID
     * @param createExternalFileProperties 
     * @return RequestConfig
     */
    fun updateUserDisplayPictureRequestConfig(id: kotlin.Long, createExternalFileProperties: CreateExternalFileProperties) : RequestConfig<CreateExternalFileProperties> {
        val localVariableBody = createExternalFileProperties
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/v1/users/{id}/display-picture".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
