/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.AddChannelMemberRequest
import org.openapitools.client.models.ApiError
import org.openapitools.client.models.ApplicationResource
import org.openapitools.client.models.AuthenticationError
import org.openapitools.client.models.ChannelGenericEventResource
import org.openapitools.client.models.ChannelInviteResource
import org.openapitools.client.models.ChannelPropertiesPatch
import org.openapitools.client.models.ChannelResource
import org.openapitools.client.models.ChatUserResource
import org.openapitools.client.models.CreateChannelGenericEventResource
import org.openapitools.client.models.CreateChannelInviteResource
import org.openapitools.client.models.CreateChannelRequest
import org.openapitools.client.models.CreateDelegatedReplyThreadKeystrokesResource
import org.openapitools.client.models.CursorPagedModelMessageResource
import org.openapitools.client.models.MessageResource
import org.openapitools.client.models.PagedModelChannelInviteResource
import org.openapitools.client.models.PagedModelChannelMembershipResource
import org.openapitools.client.models.PagedModelChannelResource
import org.openapitools.client.models.PagedModelChatUserResource
import org.openapitools.client.models.ReplyThreadKeystrokesResource
import org.openapitools.client.models.SendChannelMessageRequest
import org.openapitools.client.models.SendChannelMessageRequest1

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class ChannelsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.chatkitty.com")
        }
    }

    /**
     * Add a channel member
     * Makes a user a group channel member
     * @param id Channel ID
     * @param addChannelMemberRequest 
     * @return ChannelResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun addChannelMember(id: kotlin.Long, addChannelMemberRequest: AddChannelMemberRequest) : ChannelResource {
        val localVarResponse = addChannelMemberWithHttpInfo(id = id, addChannelMemberRequest = addChannelMemberRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ChannelResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Add a channel member
     * Makes a user a group channel member
     * @param id Channel ID
     * @param addChannelMemberRequest 
     * @return ApiResponse<ChannelResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun addChannelMemberWithHttpInfo(id: kotlin.Long, addChannelMemberRequest: AddChannelMemberRequest) : ApiResponse<ChannelResource?> {
        val localVariableConfig = addChannelMemberRequestConfig(id = id, addChannelMemberRequest = addChannelMemberRequest)

        return request<AddChannelMemberRequest, ChannelResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation addChannelMember
     *
     * @param id Channel ID
     * @param addChannelMemberRequest 
     * @return RequestConfig
     */
    fun addChannelMemberRequestConfig(id: kotlin.Long, addChannelMemberRequest: AddChannelMemberRequest) : RequestConfig<AddChannelMemberRequest> {
        val localVariableBody = addChannelMemberRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/v1/channels/{id}/members".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Add a channel moderator
     * Makes a user a group channel moderator
     * @param id Channel ID
     * @param addChannelMemberRequest 
     * @return ChatUserResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun addChannelModerator(id: kotlin.Long, addChannelMemberRequest: AddChannelMemberRequest) : ChatUserResource {
        val localVarResponse = addChannelModeratorWithHttpInfo(id = id, addChannelMemberRequest = addChannelMemberRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ChatUserResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Add a channel moderator
     * Makes a user a group channel moderator
     * @param id Channel ID
     * @param addChannelMemberRequest 
     * @return ApiResponse<ChatUserResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun addChannelModeratorWithHttpInfo(id: kotlin.Long, addChannelMemberRequest: AddChannelMemberRequest) : ApiResponse<ChatUserResource?> {
        val localVariableConfig = addChannelModeratorRequestConfig(id = id, addChannelMemberRequest = addChannelMemberRequest)

        return request<AddChannelMemberRequest, ChatUserResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation addChannelModerator
     *
     * @param id Channel ID
     * @param addChannelMemberRequest 
     * @return RequestConfig
     */
    fun addChannelModeratorRequestConfig(id: kotlin.Long, addChannelMemberRequest: AddChannelMemberRequest) : RequestConfig<AddChannelMemberRequest> {
        val localVariableBody = addChannelMemberRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/v1/channels/{id}/moderators".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Create a channel
     * Creates a new channel or returns an equivalent existing channel
     * @param createChannelRequest 
     * @return ChannelResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createChannel(createChannelRequest: CreateChannelRequest) : ChannelResource {
        val localVarResponse = createChannelWithHttpInfo(createChannelRequest = createChannelRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ChannelResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a channel
     * Creates a new channel or returns an equivalent existing channel
     * @param createChannelRequest 
     * @return ApiResponse<ChannelResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createChannelWithHttpInfo(createChannelRequest: CreateChannelRequest) : ApiResponse<ChannelResource?> {
        val localVariableConfig = createChannelRequestConfig(createChannelRequest = createChannelRequest)

        return request<CreateChannelRequest, ChannelResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createChannel
     *
     * @param createChannelRequest 
     * @return RequestConfig
     */
    fun createChannelRequestConfig(createChannelRequest: CreateChannelRequest) : RequestConfig<CreateChannelRequest> {
        val localVariableBody = createChannelRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/v1/channels",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Delete a channel
     * Deletes a channel by ID
     * @param id Channel ID
     * @return ApplicationResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteChannel(id: kotlin.Long) : ApplicationResource {
        val localVarResponse = deleteChannelWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ApplicationResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete a channel
     * Deletes a channel by ID
     * @param id Channel ID
     * @return ApiResponse<ApplicationResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deleteChannelWithHttpInfo(id: kotlin.Long) : ApiResponse<ApplicationResource?> {
        val localVariableConfig = deleteChannelRequestConfig(id = id)

        return request<Unit, ApplicationResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation deleteChannel
     *
     * @param id Channel ID
     * @return RequestConfig
     */
    fun deleteChannelRequestConfig(id: kotlin.Long) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/v1/channels/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * List channel invites
     * Returns a page of invites sent to join this channel
     * @param id Channel ID
     * @param page Zero-based page index (0..N) (optional, default to 0)
     * @param size The size of the page to be returned (optional, default to 25)
     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return PagedModelChannelInviteResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listChannelInvites(id: kotlin.Long, page: kotlin.Int? = 0, size: kotlin.Int? = 25, sort: kotlin.collections.List<kotlin.String>? = null) : PagedModelChannelInviteResource {
        val localVarResponse = listChannelInvitesWithHttpInfo(id = id, page = page, size = size, sort = sort)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PagedModelChannelInviteResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List channel invites
     * Returns a page of invites sent to join this channel
     * @param id Channel ID
     * @param page Zero-based page index (0..N) (optional, default to 0)
     * @param size The size of the page to be returned (optional, default to 25)
     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return ApiResponse<PagedModelChannelInviteResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listChannelInvitesWithHttpInfo(id: kotlin.Long, page: kotlin.Int?, size: kotlin.Int?, sort: kotlin.collections.List<kotlin.String>?) : ApiResponse<PagedModelChannelInviteResource?> {
        val localVariableConfig = listChannelInvitesRequestConfig(id = id, page = page, size = size, sort = sort)

        return request<Unit, PagedModelChannelInviteResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listChannelInvites
     *
     * @param id Channel ID
     * @param page Zero-based page index (0..N) (optional, default to 0)
     * @param size The size of the page to be returned (optional, default to 25)
     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return RequestConfig
     */
    fun listChannelInvitesRequestConfig(id: kotlin.Long, page: kotlin.Int?, size: kotlin.Int?, sort: kotlin.collections.List<kotlin.String>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (size != null) {
                    put("size", listOf(size.toString()))
                }
                if (sort != null) {
                    put("sort", toMultiValue(sort.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/channels/{id}/invites".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * List a channel&#39;s members
     * Returns a page of channel members
     * @param id Channel ID
     * @param page Zero-based page index (0..N) (optional, default to 0)
     * @param size The size of the page to be returned (optional, default to 25)
     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return PagedModelChatUserResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listChannelMembers(id: kotlin.Long, page: kotlin.Int? = 0, size: kotlin.Int? = 25, sort: kotlin.collections.List<kotlin.String>? = null) : PagedModelChatUserResource {
        val localVarResponse = listChannelMembersWithHttpInfo(id = id, page = page, size = size, sort = sort)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PagedModelChatUserResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List a channel&#39;s members
     * Returns a page of channel members
     * @param id Channel ID
     * @param page Zero-based page index (0..N) (optional, default to 0)
     * @param size The size of the page to be returned (optional, default to 25)
     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return ApiResponse<PagedModelChatUserResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listChannelMembersWithHttpInfo(id: kotlin.Long, page: kotlin.Int?, size: kotlin.Int?, sort: kotlin.collections.List<kotlin.String>?) : ApiResponse<PagedModelChatUserResource?> {
        val localVariableConfig = listChannelMembersRequestConfig(id = id, page = page, size = size, sort = sort)

        return request<Unit, PagedModelChatUserResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listChannelMembers
     *
     * @param id Channel ID
     * @param page Zero-based page index (0..N) (optional, default to 0)
     * @param size The size of the page to be returned (optional, default to 25)
     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return RequestConfig
     */
    fun listChannelMembersRequestConfig(id: kotlin.Long, page: kotlin.Int?, size: kotlin.Int?, sort: kotlin.collections.List<kotlin.String>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (size != null) {
                    put("size", listOf(size.toString()))
                }
                if (sort != null) {
                    put("sort", toMultiValue(sort.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/channels/{id}/members".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * List channel memberships
     * Returns a page of channel membership info for this channel
     * @param id Channel ID
     * @param page Zero-based page index (0..N) (optional, default to 0)
     * @param size The size of the page to be returned (optional, default to 25)
     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return PagedModelChannelMembershipResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listChannelMemberships(id: kotlin.Long, page: kotlin.Int? = 0, size: kotlin.Int? = 25, sort: kotlin.collections.List<kotlin.String>? = null) : PagedModelChannelMembershipResource {
        val localVarResponse = listChannelMembershipsWithHttpInfo(id = id, page = page, size = size, sort = sort)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PagedModelChannelMembershipResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List channel memberships
     * Returns a page of channel membership info for this channel
     * @param id Channel ID
     * @param page Zero-based page index (0..N) (optional, default to 0)
     * @param size The size of the page to be returned (optional, default to 25)
     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return ApiResponse<PagedModelChannelMembershipResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listChannelMembershipsWithHttpInfo(id: kotlin.Long, page: kotlin.Int?, size: kotlin.Int?, sort: kotlin.collections.List<kotlin.String>?) : ApiResponse<PagedModelChannelMembershipResource?> {
        val localVariableConfig = listChannelMembershipsRequestConfig(id = id, page = page, size = size, sort = sort)

        return request<Unit, PagedModelChannelMembershipResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listChannelMemberships
     *
     * @param id Channel ID
     * @param page Zero-based page index (0..N) (optional, default to 0)
     * @param size The size of the page to be returned (optional, default to 25)
     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return RequestConfig
     */
    fun listChannelMembershipsRequestConfig(id: kotlin.Long, page: kotlin.Int?, size: kotlin.Int?, sort: kotlin.collections.List<kotlin.String>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (size != null) {
                    put("size", listOf(size.toString()))
                }
                if (sort != null) {
                    put("sort", toMultiValue(sort.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/channels/{id}/memberships".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter relation
     */
     enum class RelationListChannelMessages(val value: kotlin.String) {
         @Json(name = "SELF") sELF("SELF"),
         @Json(name = "PREVIOUS") pREVIOUS("PREVIOUS"),
         @Json(name = "NEXT") nEXT("NEXT")
     }

    /**
     * List channel messages
     * Returns a page of messages sent in this channel
     * @param id Channel ID
     * @param size The size of the page to be returned (optional)
     * @param start Start cursor value. Do not set manually. Provided by the Platform API pagination engine to fetch previous or next pages (optional)
     * @param next Next page cursor value. Do not set manually. Provided by the Platform API pagination engine to fetch subsequent pages (optional)
     * @param relation Page cursor relation. Do not set manually. Provided by the Platform API pagination engine to fetch previous or next pages (optional)
     * @param username  (optional)
     * @param query  (optional)
     * @return CursorPagedModelMessageResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listChannelMessages(id: kotlin.Long, size: kotlin.Int? = null, start: kotlin.Long? = null, next: kotlin.Long? = null, relation: RelationListChannelMessages? = null, username: kotlin.String? = null, query: kotlin.String? = null) : CursorPagedModelMessageResource {
        val localVarResponse = listChannelMessagesWithHttpInfo(id = id, size = size, start = start, next = next, relation = relation, username = username, query = query)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CursorPagedModelMessageResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List channel messages
     * Returns a page of messages sent in this channel
     * @param id Channel ID
     * @param size The size of the page to be returned (optional)
     * @param start Start cursor value. Do not set manually. Provided by the Platform API pagination engine to fetch previous or next pages (optional)
     * @param next Next page cursor value. Do not set manually. Provided by the Platform API pagination engine to fetch subsequent pages (optional)
     * @param relation Page cursor relation. Do not set manually. Provided by the Platform API pagination engine to fetch previous or next pages (optional)
     * @param username  (optional)
     * @param query  (optional)
     * @return ApiResponse<CursorPagedModelMessageResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listChannelMessagesWithHttpInfo(id: kotlin.Long, size: kotlin.Int?, start: kotlin.Long?, next: kotlin.Long?, relation: RelationListChannelMessages?, username: kotlin.String?, query: kotlin.String?) : ApiResponse<CursorPagedModelMessageResource?> {
        val localVariableConfig = listChannelMessagesRequestConfig(id = id, size = size, start = start, next = next, relation = relation, username = username, query = query)

        return request<Unit, CursorPagedModelMessageResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listChannelMessages
     *
     * @param id Channel ID
     * @param size The size of the page to be returned (optional)
     * @param start Start cursor value. Do not set manually. Provided by the Platform API pagination engine to fetch previous or next pages (optional)
     * @param next Next page cursor value. Do not set manually. Provided by the Platform API pagination engine to fetch subsequent pages (optional)
     * @param relation Page cursor relation. Do not set manually. Provided by the Platform API pagination engine to fetch previous or next pages (optional)
     * @param username  (optional)
     * @param query  (optional)
     * @return RequestConfig
     */
    fun listChannelMessagesRequestConfig(id: kotlin.Long, size: kotlin.Int?, start: kotlin.Long?, next: kotlin.Long?, relation: RelationListChannelMessages?, username: kotlin.String?, query: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (size != null) {
                    put("size", listOf(size.toString()))
                }
                if (start != null) {
                    put("start", listOf(start.toString()))
                }
                if (next != null) {
                    put("next", listOf(next.toString()))
                }
                if (relation != null) {
                    put("relation", listOf(relation.value))
                }
                if (username != null) {
                    put("username", listOf(username.toString()))
                }
                if (query != null) {
                    put("query", listOf(query.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/channels/{id}/messages".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Lists a channel&#39;s moderators
     * Returns a page of channel moderators
     * @param id Channel ID
     * @param page Zero-based page index (0..N) (optional, default to 0)
     * @param size The size of the page to be returned (optional, default to 25)
     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return PagedModelChatUserResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listChannelModerators(id: kotlin.Long, page: kotlin.Int? = 0, size: kotlin.Int? = 25, sort: kotlin.collections.List<kotlin.String>? = null) : PagedModelChatUserResource {
        val localVarResponse = listChannelModeratorsWithHttpInfo(id = id, page = page, size = size, sort = sort)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PagedModelChatUserResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Lists a channel&#39;s moderators
     * Returns a page of channel moderators
     * @param id Channel ID
     * @param page Zero-based page index (0..N) (optional, default to 0)
     * @param size The size of the page to be returned (optional, default to 25)
     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return ApiResponse<PagedModelChatUserResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listChannelModeratorsWithHttpInfo(id: kotlin.Long, page: kotlin.Int?, size: kotlin.Int?, sort: kotlin.collections.List<kotlin.String>?) : ApiResponse<PagedModelChatUserResource?> {
        val localVariableConfig = listChannelModeratorsRequestConfig(id = id, page = page, size = size, sort = sort)

        return request<Unit, PagedModelChatUserResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listChannelModerators
     *
     * @param id Channel ID
     * @param page Zero-based page index (0..N) (optional, default to 0)
     * @param size The size of the page to be returned (optional, default to 25)
     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return RequestConfig
     */
    fun listChannelModeratorsRequestConfig(id: kotlin.Long, page: kotlin.Int?, size: kotlin.Int?, sort: kotlin.collections.List<kotlin.String>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (size != null) {
                    put("size", listOf(size.toString()))
                }
                if (sort != null) {
                    put("sort", toMultiValue(sort.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/channels/{id}/moderators".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * List channel participants
     * Returns a page of channel active participants: members that currently online
     * @param id Channel ID
     * @param page Zero-based page index (0..N) (optional, default to 0)
     * @param size The size of the page to be returned (optional, default to 25)
     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return PagedModelChatUserResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listChannelParticipants(id: kotlin.Long, page: kotlin.Int? = 0, size: kotlin.Int? = 25, sort: kotlin.collections.List<kotlin.String>? = null) : PagedModelChatUserResource {
        val localVarResponse = listChannelParticipantsWithHttpInfo(id = id, page = page, size = size, sort = sort)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PagedModelChatUserResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List channel participants
     * Returns a page of channel active participants: members that currently online
     * @param id Channel ID
     * @param page Zero-based page index (0..N) (optional, default to 0)
     * @param size The size of the page to be returned (optional, default to 25)
     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return ApiResponse<PagedModelChatUserResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listChannelParticipantsWithHttpInfo(id: kotlin.Long, page: kotlin.Int?, size: kotlin.Int?, sort: kotlin.collections.List<kotlin.String>?) : ApiResponse<PagedModelChatUserResource?> {
        val localVariableConfig = listChannelParticipantsRequestConfig(id = id, page = page, size = size, sort = sort)

        return request<Unit, PagedModelChatUserResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listChannelParticipants
     *
     * @param id Channel ID
     * @param page Zero-based page index (0..N) (optional, default to 0)
     * @param size The size of the page to be returned (optional, default to 25)
     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return RequestConfig
     */
    fun listChannelParticipantsRequestConfig(id: kotlin.Long, page: kotlin.Int?, size: kotlin.Int?, sort: kotlin.collections.List<kotlin.String>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (size != null) {
                    put("size", listOf(size.toString()))
                }
                if (sort != null) {
                    put("sort", toMultiValue(sort.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/channels/{id}/participants".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter type
     */
     enum class TypeListChannels(val value: kotlin.String) {
         @Json(name = "DIRECT") dIRECT("DIRECT"),
         @Json(name = "PUBLIC") pUBLIC("PUBLIC"),
         @Json(name = "PRIVATE") pRIVATE("PRIVATE")
     }

    /**
     * List channels
     * Returns a page of channels belonging to this application
     * @param page Zero-based page index (0..N) (optional, default to 0)
     * @param size The size of the page to be returned (optional, default to 25)
     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @param type Filters by channel type (optional)
     * @param members Filters by channel members using their usernames (optional)
     * @param startTime Filters for channels created within a time range: start time (optional)
     * @param endTime Filters for channels created within a time range: end time (optional)
     * @param properties Filters by channel custom properties (optional)
     * @return PagedModelChannelResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listChannels(page: kotlin.Int? = 0, size: kotlin.Int? = 25, sort: kotlin.collections.List<kotlin.String>? = null, type: TypeListChannels? = null, members: kotlin.collections.Set<kotlin.String>? = null, startTime: java.time.OffsetDateTime? = null, endTime: java.time.OffsetDateTime? = null, properties: kotlin.String? = null) : PagedModelChannelResource {
        val localVarResponse = listChannelsWithHttpInfo(page = page, size = size, sort = sort, type = type, members = members, startTime = startTime, endTime = endTime, properties = properties)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PagedModelChannelResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List channels
     * Returns a page of channels belonging to this application
     * @param page Zero-based page index (0..N) (optional, default to 0)
     * @param size The size of the page to be returned (optional, default to 25)
     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @param type Filters by channel type (optional)
     * @param members Filters by channel members using their usernames (optional)
     * @param startTime Filters for channels created within a time range: start time (optional)
     * @param endTime Filters for channels created within a time range: end time (optional)
     * @param properties Filters by channel custom properties (optional)
     * @return ApiResponse<PagedModelChannelResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listChannelsWithHttpInfo(page: kotlin.Int?, size: kotlin.Int?, sort: kotlin.collections.List<kotlin.String>?, type: TypeListChannels?, members: kotlin.collections.Set<kotlin.String>?, startTime: java.time.OffsetDateTime?, endTime: java.time.OffsetDateTime?, properties: kotlin.String?) : ApiResponse<PagedModelChannelResource?> {
        val localVariableConfig = listChannelsRequestConfig(page = page, size = size, sort = sort, type = type, members = members, startTime = startTime, endTime = endTime, properties = properties)

        return request<Unit, PagedModelChannelResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listChannels
     *
     * @param page Zero-based page index (0..N) (optional, default to 0)
     * @param size The size of the page to be returned (optional, default to 25)
     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @param type Filters by channel type (optional)
     * @param members Filters by channel members using their usernames (optional)
     * @param startTime Filters for channels created within a time range: start time (optional)
     * @param endTime Filters for channels created within a time range: end time (optional)
     * @param properties Filters by channel custom properties (optional)
     * @return RequestConfig
     */
    fun listChannelsRequestConfig(page: kotlin.Int?, size: kotlin.Int?, sort: kotlin.collections.List<kotlin.String>?, type: TypeListChannels?, members: kotlin.collections.Set<kotlin.String>?, startTime: java.time.OffsetDateTime?, endTime: java.time.OffsetDateTime?, properties: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (size != null) {
                    put("size", listOf(size.toString()))
                }
                if (sort != null) {
                    put("sort", toMultiValue(sort.toList(), "multi"))
                }
                if (type != null) {
                    put("type", listOf(type.value))
                }
                if (members != null) {
                    put("members", toMultiValue(members.toList(), "multi"))
                }
                if (startTime != null) {
                    put("startTime", listOf(parseDateToQueryString(startTime)))
                }
                if (endTime != null) {
                    put("endTime", listOf(parseDateToQueryString(endTime)))
                }
                if (properties != null) {
                    put("properties", listOf(properties.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/channels",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Remove a channel member
     * Removes a member from a group channel
     * @param id Channel ID
     * @param userId User ID of member to be removed
     * @return ChannelResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun removeChannelMember(id: kotlin.Long, userId: kotlin.Long) : ChannelResource {
        val localVarResponse = removeChannelMemberWithHttpInfo(id = id, userId = userId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ChannelResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Remove a channel member
     * Removes a member from a group channel
     * @param id Channel ID
     * @param userId User ID of member to be removed
     * @return ApiResponse<ChannelResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun removeChannelMemberWithHttpInfo(id: kotlin.Long, userId: kotlin.Long) : ApiResponse<ChannelResource?> {
        val localVariableConfig = removeChannelMemberRequestConfig(id = id, userId = userId)

        return request<Unit, ChannelResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation removeChannelMember
     *
     * @param id Channel ID
     * @param userId User ID of member to be removed
     * @return RequestConfig
     */
    fun removeChannelMemberRequestConfig(id: kotlin.Long, userId: kotlin.Long) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/v1/channels/{id}/members/{user_id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())).replace("{"+"user_id"+"}", encodeURIComponent(userId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Remove a channel moderator
     * Removes a moderator from a group channel
     * @param id Channel ID
     * @param userId User ID of moderator to be removed
     * @return ChannelResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun removeChannelModerator(id: kotlin.Long, userId: kotlin.Long) : ChannelResource {
        val localVarResponse = removeChannelModeratorWithHttpInfo(id = id, userId = userId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ChannelResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Remove a channel moderator
     * Removes a moderator from a group channel
     * @param id Channel ID
     * @param userId User ID of moderator to be removed
     * @return ApiResponse<ChannelResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun removeChannelModeratorWithHttpInfo(id: kotlin.Long, userId: kotlin.Long) : ApiResponse<ChannelResource?> {
        val localVariableConfig = removeChannelModeratorRequestConfig(id = id, userId = userId)

        return request<Unit, ChannelResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation removeChannelModerator
     *
     * @param id Channel ID
     * @param userId User ID of moderator to be removed
     * @return RequestConfig
     */
    fun removeChannelModeratorRequestConfig(id: kotlin.Long, userId: kotlin.Long) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/v1/channels/{id}/moderators/{user_id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())).replace("{"+"user_id"+"}", encodeURIComponent(userId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve a channel
     * Returns a channel by ID
     * @param id Channel ID
     * @return ChannelResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun retrieveChannel(id: kotlin.Long) : ChannelResource {
        val localVarResponse = retrieveChannelWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ChannelResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve a channel
     * Returns a channel by ID
     * @param id Channel ID
     * @return ApiResponse<ChannelResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun retrieveChannelWithHttpInfo(id: kotlin.Long) : ApiResponse<ChannelResource?> {
        val localVariableConfig = retrieveChannelRequestConfig(id = id)

        return request<Unit, ChannelResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation retrieveChannel
     *
     * @param id Channel ID
     * @return RequestConfig
     */
    fun retrieveChannelRequestConfig(id: kotlin.Long) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/channels/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Send a channel event
     * Sends a custom channel event
     * @param id Channel ID
     * @param createChannelGenericEventResource 
     * @return ChannelGenericEventResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun sendChannelEvent(id: kotlin.Long, createChannelGenericEventResource: CreateChannelGenericEventResource) : ChannelGenericEventResource {
        val localVarResponse = sendChannelEventWithHttpInfo(id = id, createChannelGenericEventResource = createChannelGenericEventResource)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ChannelGenericEventResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Send a channel event
     * Sends a custom channel event
     * @param id Channel ID
     * @param createChannelGenericEventResource 
     * @return ApiResponse<ChannelGenericEventResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun sendChannelEventWithHttpInfo(id: kotlin.Long, createChannelGenericEventResource: CreateChannelGenericEventResource) : ApiResponse<ChannelGenericEventResource?> {
        val localVariableConfig = sendChannelEventRequestConfig(id = id, createChannelGenericEventResource = createChannelGenericEventResource)

        return request<CreateChannelGenericEventResource, ChannelGenericEventResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation sendChannelEvent
     *
     * @param id Channel ID
     * @param createChannelGenericEventResource 
     * @return RequestConfig
     */
    fun sendChannelEventRequestConfig(id: kotlin.Long, createChannelGenericEventResource: CreateChannelGenericEventResource) : RequestConfig<CreateChannelGenericEventResource> {
        val localVariableBody = createChannelGenericEventResource
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/v1/channels/{id}/events".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Send a channel invite
     * Sends a channel invite to user
     * @param id Channel ID
     * @param createChannelInviteResource 
     * @return ChannelInviteResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun sendChannelInvite(id: kotlin.Long, createChannelInviteResource: CreateChannelInviteResource) : ChannelInviteResource {
        val localVarResponse = sendChannelInviteWithHttpInfo(id = id, createChannelInviteResource = createChannelInviteResource)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ChannelInviteResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Send a channel invite
     * Sends a channel invite to user
     * @param id Channel ID
     * @param createChannelInviteResource 
     * @return ApiResponse<ChannelInviteResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun sendChannelInviteWithHttpInfo(id: kotlin.Long, createChannelInviteResource: CreateChannelInviteResource) : ApiResponse<ChannelInviteResource?> {
        val localVariableConfig = sendChannelInviteRequestConfig(id = id, createChannelInviteResource = createChannelInviteResource)

        return request<CreateChannelInviteResource, ChannelInviteResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation sendChannelInvite
     *
     * @param id Channel ID
     * @param createChannelInviteResource 
     * @return RequestConfig
     */
    fun sendChannelInviteRequestConfig(id: kotlin.Long, createChannelInviteResource: CreateChannelInviteResource) : RequestConfig<CreateChannelInviteResource> {
        val localVariableBody = createChannelInviteResource
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/v1/channels/{id}/invites".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Send channel keystrokes
     * Sends keystrokes in this channel on behalf of a user
     * @param id 
     * @param createDelegatedReplyThreadKeystrokesResource 
     * @return ReplyThreadKeystrokesResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun sendChannelKeystrokes(id: kotlin.Long, createDelegatedReplyThreadKeystrokesResource: CreateDelegatedReplyThreadKeystrokesResource) : ReplyThreadKeystrokesResource {
        val localVarResponse = sendChannelKeystrokesWithHttpInfo(id = id, createDelegatedReplyThreadKeystrokesResource = createDelegatedReplyThreadKeystrokesResource)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ReplyThreadKeystrokesResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Send channel keystrokes
     * Sends keystrokes in this channel on behalf of a user
     * @param id 
     * @param createDelegatedReplyThreadKeystrokesResource 
     * @return ApiResponse<ReplyThreadKeystrokesResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun sendChannelKeystrokesWithHttpInfo(id: kotlin.Long, createDelegatedReplyThreadKeystrokesResource: CreateDelegatedReplyThreadKeystrokesResource) : ApiResponse<ReplyThreadKeystrokesResource?> {
        val localVariableConfig = sendChannelKeystrokesRequestConfig(id = id, createDelegatedReplyThreadKeystrokesResource = createDelegatedReplyThreadKeystrokesResource)

        return request<CreateDelegatedReplyThreadKeystrokesResource, ReplyThreadKeystrokesResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation sendChannelKeystrokes
     *
     * @param id 
     * @param createDelegatedReplyThreadKeystrokesResource 
     * @return RequestConfig
     */
    fun sendChannelKeystrokesRequestConfig(id: kotlin.Long, createDelegatedReplyThreadKeystrokesResource: CreateDelegatedReplyThreadKeystrokesResource) : RequestConfig<CreateDelegatedReplyThreadKeystrokesResource> {
        val localVariableBody = createDelegatedReplyThreadKeystrokesResource
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/v1/channels/{id}/keystrokes".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Send a channel message
     * Sends a message in this channel as the system or on behalf of a user
     * @param id Channel ID
     * @param sendChannelMessageRequest 
     * @return MessageResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun sendChannelMessage(id: kotlin.Long, sendChannelMessageRequest: SendChannelMessageRequest) : MessageResource {
        val localVarResponse = sendChannelMessageWithHttpInfo(id = id, sendChannelMessageRequest = sendChannelMessageRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MessageResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Send a channel message
     * Sends a message in this channel as the system or on behalf of a user
     * @param id Channel ID
     * @param sendChannelMessageRequest 
     * @return ApiResponse<MessageResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun sendChannelMessageWithHttpInfo(id: kotlin.Long, sendChannelMessageRequest: SendChannelMessageRequest) : ApiResponse<MessageResource?> {
        val localVariableConfig = sendChannelMessageRequestConfig(id = id, sendChannelMessageRequest = sendChannelMessageRequest)

        return request<SendChannelMessageRequest, MessageResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation sendChannelMessage
     *
     * @param id Channel ID
     * @param sendChannelMessageRequest 
     * @return RequestConfig
     */
    fun sendChannelMessageRequestConfig(id: kotlin.Long, sendChannelMessageRequest: SendChannelMessageRequest) : RequestConfig<SendChannelMessageRequest> {
        val localVariableBody = sendChannelMessageRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/v1/channels/{id}/messages".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update a channel
     * Updates a channel properties
     * @param id Channel ID
     * @param channelPropertiesPatch  (optional)
     * @return ChannelResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateChannel(id: kotlin.Long, channelPropertiesPatch: ChannelPropertiesPatch? = null) : ChannelResource {
        val localVarResponse = updateChannelWithHttpInfo(id = id, channelPropertiesPatch = channelPropertiesPatch)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ChannelResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update a channel
     * Updates a channel properties
     * @param id Channel ID
     * @param channelPropertiesPatch  (optional)
     * @return ApiResponse<ChannelResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateChannelWithHttpInfo(id: kotlin.Long, channelPropertiesPatch: ChannelPropertiesPatch?) : ApiResponse<ChannelResource?> {
        val localVariableConfig = updateChannelRequestConfig(id = id, channelPropertiesPatch = channelPropertiesPatch)

        return request<ChannelPropertiesPatch, ChannelResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateChannel
     *
     * @param id Channel ID
     * @param channelPropertiesPatch  (optional)
     * @return RequestConfig
     */
    fun updateChannelRequestConfig(id: kotlin.Long, channelPropertiesPatch: ChannelPropertiesPatch?) : RequestConfig<ChannelPropertiesPatch> {
        val localVariableBody = channelPropertiesPatch
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/v1/channels/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
