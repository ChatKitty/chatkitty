/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.ApiError
import org.openapitools.client.models.AuthenticationError
import org.openapitools.client.models.ChatFunctionResource
import org.openapitools.client.models.ChatRuntimeDependencyProperties
import org.openapitools.client.models.ChatRuntimeEnvironmentVariablesProperties
import org.openapitools.client.models.ChatRuntimeResource
import org.openapitools.client.models.ChatRuntimeScriptProperties
import org.openapitools.client.models.CreateChatFunctionResource
import org.openapitools.client.models.PagedModelChatFunctionResource

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class RuntimeApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.chatkitty.com")
        }
    }

    /**
     * Create a NodeJS chat runtime function
     * Creates a NodeJS chat function for this runtime
     * @param createChatFunctionResource 
     * @return ChatFunctionResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createNodejsRuntimeFunction(createChatFunctionResource: CreateChatFunctionResource) : ChatFunctionResource {
        val localVarResponse = createNodejsRuntimeFunctionWithHttpInfo(createChatFunctionResource = createChatFunctionResource)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ChatFunctionResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a NodeJS chat runtime function
     * Creates a NodeJS chat function for this runtime
     * @param createChatFunctionResource 
     * @return ApiResponse<ChatFunctionResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createNodejsRuntimeFunctionWithHttpInfo(createChatFunctionResource: CreateChatFunctionResource) : ApiResponse<ChatFunctionResource?> {
        val localVariableConfig = createNodejsRuntimeFunctionRequestConfig(createChatFunctionResource = createChatFunctionResource)

        return request<CreateChatFunctionResource, ChatFunctionResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createNodejsRuntimeFunction
     *
     * @param createChatFunctionResource 
     * @return RequestConfig
     */
    fun createNodejsRuntimeFunctionRequestConfig(createChatFunctionResource: CreateChatFunctionResource) : RequestConfig<CreateChatFunctionResource> {
        val localVariableBody = createChatFunctionResource
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/v1/runtimes/nodejs/functions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * List NodeJS chat runtime functions
     * Returns a page of functions for this application&#39;s NodeJS chat runtime
     * @param page Zero-based page index (0..N) (optional, default to 0)
     * @param size The size of the page to be returned (optional, default to 25)
     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return PagedModelChatFunctionResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listNodejsRuntimeFunctions(page: kotlin.Int? = 0, size: kotlin.Int? = 25, sort: kotlin.collections.List<kotlin.String>? = null) : PagedModelChatFunctionResource {
        val localVarResponse = listNodejsRuntimeFunctionsWithHttpInfo(page = page, size = size, sort = sort)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PagedModelChatFunctionResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List NodeJS chat runtime functions
     * Returns a page of functions for this application&#39;s NodeJS chat runtime
     * @param page Zero-based page index (0..N) (optional, default to 0)
     * @param size The size of the page to be returned (optional, default to 25)
     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return ApiResponse<PagedModelChatFunctionResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun listNodejsRuntimeFunctionsWithHttpInfo(page: kotlin.Int?, size: kotlin.Int?, sort: kotlin.collections.List<kotlin.String>?) : ApiResponse<PagedModelChatFunctionResource?> {
        val localVariableConfig = listNodejsRuntimeFunctionsRequestConfig(page = page, size = size, sort = sort)

        return request<Unit, PagedModelChatFunctionResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation listNodejsRuntimeFunctions
     *
     * @param page Zero-based page index (0..N) (optional, default to 0)
     * @param size The size of the page to be returned (optional, default to 25)
     * @param sort Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. (optional)
     * @return RequestConfig
     */
    fun listNodejsRuntimeFunctionsRequestConfig(page: kotlin.Int?, size: kotlin.Int?, sort: kotlin.collections.List<kotlin.String>?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (size != null) {
                    put("size", listOf(size.toString()))
                }
                if (sort != null) {
                    put("sort", toMultiValue(sort.toList(), "multi"))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/runtimes/nodejs/functions",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve NodeJS chat runtime
     * Return this application&#39;s NodeJS chat runtime
     * @return ChatRuntimeResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun retrieveNodejsRuntime() : ChatRuntimeResource {
        val localVarResponse = retrieveNodejsRuntimeWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ChatRuntimeResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve NodeJS chat runtime
     * Return this application&#39;s NodeJS chat runtime
     * @return ApiResponse<ChatRuntimeResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun retrieveNodejsRuntimeWithHttpInfo() : ApiResponse<ChatRuntimeResource?> {
        val localVariableConfig = retrieveNodejsRuntimeRequestConfig()

        return request<Unit, ChatRuntimeResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation retrieveNodejsRuntime
     *
     * @return RequestConfig
     */
    fun retrieveNodejsRuntimeRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/runtimes/nodejs",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update NodeJS chat runtime NPM dependencies
     * Updates the NPM dependencies for this application&#39;s NodeJS chat runtime
     * @param chatRuntimeDependencyProperties 
     * @return ChatRuntimeResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateNodejsRuntimeDependencies(chatRuntimeDependencyProperties: kotlin.collections.List<ChatRuntimeDependencyProperties>) : ChatRuntimeResource {
        val localVarResponse = updateNodejsRuntimeDependenciesWithHttpInfo(chatRuntimeDependencyProperties = chatRuntimeDependencyProperties)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ChatRuntimeResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update NodeJS chat runtime NPM dependencies
     * Updates the NPM dependencies for this application&#39;s NodeJS chat runtime
     * @param chatRuntimeDependencyProperties 
     * @return ApiResponse<ChatRuntimeResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateNodejsRuntimeDependenciesWithHttpInfo(chatRuntimeDependencyProperties: kotlin.collections.List<ChatRuntimeDependencyProperties>) : ApiResponse<ChatRuntimeResource?> {
        val localVariableConfig = updateNodejsRuntimeDependenciesRequestConfig(chatRuntimeDependencyProperties = chatRuntimeDependencyProperties)

        return request<kotlin.collections.List<ChatRuntimeDependencyProperties>, ChatRuntimeResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateNodejsRuntimeDependencies
     *
     * @param chatRuntimeDependencyProperties 
     * @return RequestConfig
     */
    fun updateNodejsRuntimeDependenciesRequestConfig(chatRuntimeDependencyProperties: kotlin.collections.List<ChatRuntimeDependencyProperties>) : RequestConfig<kotlin.collections.List<ChatRuntimeDependencyProperties>> {
        val localVariableBody = chatRuntimeDependencyProperties
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/v1/runtimes/nodejs/dependencies",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update NodeJS chat runtime environment variables
     * Updates the runtime environment variables of this application&#39;s NodeJS chat runtime
     * @param chatRuntimeEnvironmentVariablesProperties 
     * @return ChatRuntimeResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateNodejsRuntimeEnvironmentVariables(chatRuntimeEnvironmentVariablesProperties: ChatRuntimeEnvironmentVariablesProperties) : ChatRuntimeResource {
        val localVarResponse = updateNodejsRuntimeEnvironmentVariablesWithHttpInfo(chatRuntimeEnvironmentVariablesProperties = chatRuntimeEnvironmentVariablesProperties)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ChatRuntimeResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update NodeJS chat runtime environment variables
     * Updates the runtime environment variables of this application&#39;s NodeJS chat runtime
     * @param chatRuntimeEnvironmentVariablesProperties 
     * @return ApiResponse<ChatRuntimeResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateNodejsRuntimeEnvironmentVariablesWithHttpInfo(chatRuntimeEnvironmentVariablesProperties: ChatRuntimeEnvironmentVariablesProperties) : ApiResponse<ChatRuntimeResource?> {
        val localVariableConfig = updateNodejsRuntimeEnvironmentVariablesRequestConfig(chatRuntimeEnvironmentVariablesProperties = chatRuntimeEnvironmentVariablesProperties)

        return request<ChatRuntimeEnvironmentVariablesProperties, ChatRuntimeResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateNodejsRuntimeEnvironmentVariables
     *
     * @param chatRuntimeEnvironmentVariablesProperties 
     * @return RequestConfig
     */
    fun updateNodejsRuntimeEnvironmentVariablesRequestConfig(chatRuntimeEnvironmentVariablesProperties: ChatRuntimeEnvironmentVariablesProperties) : RequestConfig<ChatRuntimeEnvironmentVariablesProperties> {
        val localVariableBody = chatRuntimeEnvironmentVariablesProperties
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/v1/runtimes/nodejs/environment-variables",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Update NodeJS chat runtime initialization script
     * Updates the initialization script for this application&#39;s NodeJS chat runtime
     * @param chatRuntimeScriptProperties 
     * @return ChatRuntimeResource
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateNodejsRuntimeInitializationScript(chatRuntimeScriptProperties: ChatRuntimeScriptProperties) : ChatRuntimeResource {
        val localVarResponse = updateNodejsRuntimeInitializationScriptWithHttpInfo(chatRuntimeScriptProperties = chatRuntimeScriptProperties)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ChatRuntimeResource
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update NodeJS chat runtime initialization script
     * Updates the initialization script for this application&#39;s NodeJS chat runtime
     * @param chatRuntimeScriptProperties 
     * @return ApiResponse<ChatRuntimeResource?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun updateNodejsRuntimeInitializationScriptWithHttpInfo(chatRuntimeScriptProperties: ChatRuntimeScriptProperties) : ApiResponse<ChatRuntimeResource?> {
        val localVariableConfig = updateNodejsRuntimeInitializationScriptRequestConfig(chatRuntimeScriptProperties = chatRuntimeScriptProperties)

        return request<ChatRuntimeScriptProperties, ChatRuntimeResource>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation updateNodejsRuntimeInitializationScript
     *
     * @param chatRuntimeScriptProperties 
     * @return RequestConfig
     */
    fun updateNodejsRuntimeInitializationScriptRequestConfig(chatRuntimeScriptProperties: ChatRuntimeScriptProperties) : RequestConfig<ChatRuntimeScriptProperties> {
        val localVariableBody = chatRuntimeScriptProperties
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json, application/vnd.hal+json, application/hal+json"

        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/v1/runtimes/nodejs/initialization-script",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
